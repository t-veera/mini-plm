version: "3.8"

services:
  # Nginx reverse proxy - main entry point
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"      # Main production port - users access this
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./mpp_files:/var/www/media:ro  # Mount media files for nginx to serve
      - static_volume:/var/www/static:ro  # Mount Django static files
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  backend:
  platform: linux/amd64
  image: ghcr.io/t-veera/mini-plm:main-backend
  volumes:
    - ./mpp_files:/app/mpp_files
    - static_volume:/app/staticfiles
  expose:
    - "8000"
  environment:
    - DEBUG=False
    - DJANGO_ALLOWED_HOSTS=*  # Allow any host by default
    - DATABASE_URL=postgres://postgres:postgres@db:5432/mini_plm
  depends_on:
    db:
      condition: service_healthy
  restart: unless-stopped
  entrypoint: ["/usr/local/bin/docker-entrypoint.sh"]
  command: ["gunicorn", "--bind", "0.0.0.0:8000", "mpp_backend.wsgi:application"]
  
  frontend:
    platform: linux/amd64
    image: ghcr.io/t-veera/mini-plm:main-frontend
    expose:
      - "80"  # Internal only - nginx proxies to this
    depends_on:
      - backend
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=mini_plm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume: